name: release-docker-image

on:
  push:
    tags:
      - 'v*.*.*'

env:
  # Docker Hub registry configuration
  REGISTRY: docker.io
  IMAGE_NAME: getschematic/schematic-replicator
  DOCKERHUB_USERNAME: getschematic

jobs:
  # Build and push Docker image
  docker:
    runs-on: runs-on=${{ github.run_id }}/runner=4cpu-linux-arm64
    permissions:
      contents: read
      security-events: write
      id-token: write # For signing and attestations
      attestations: write # For build provenance
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Optimize for cross-compilation performance
          driver-opts: |
            network=host
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # For production readiness: multi-platform builds
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      # Production-ready: Build for multiple architectures with QEMU optimizations
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Enable built-in attestations (provenance and SBOM)
          provenance: mode=max
          sbom: true
          # QEMU optimization: Use native cross-compilation instead of emulation
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      # Security: Scan the built image
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'table'
          # Output will be shown in the GitHub Actions log

